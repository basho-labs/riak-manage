#!/usr/bin/env bash

manage_create_description () {
    echo "Create a local Riak cluster"
    return 0
}

manage_create_help () {
cat << EOF

SYNOPSIS
 $bin_name ${ul}cluster${noul} create ${ul}options${noul}

DESCRIPTION
 Configure a local Riak cluster. All options can be determined automatically.

 --path PATH       Path that will contain the cluster directory.
                   Default: First path in RIAK_CLUSTERS environment variable.

 --bindir BINDIR   Path to the riak commands to be used for the cluster.
                   Example: /usr/sbin
                   Default: Path to riak in the PATH environment variable.

 --libdir LIBDIR   Path to the riak libraries to be used for the cluster. The
                   path should contain the lib, releases, and erts-x.x.x dirs.
                   Example: /usr/lib/riak
                   Default: Determined from the riak command in PATH or from
                            the path specified with the --bindir option.

 --template TPLDIR Name of the template directory that should be used to
                   generate the node configurations. The directory is relative
                   to the riak-manage/templates directory.
                   Default: default

 --ring RINGSIZE   Ring size to set in the cluster app.config.
                   Default: 64

 --nodes NUM       Number of nodes the cluster should have available.
                   Default: 3

 --backend BACKEND Use bitcask, eleveldb, or memory backend.
                   Default: bitcask

 --nodenet IP      Network to use in -name setting in vm.args.
                   Default: 127.0.0.1

 --httpnet IP      Network to use for HTTP interface.
                   Default: 127.0.0.1

 --pbnet IP        Network to use for PB interface.
                   Default: 127.0.0.1

 --snmpnet IP      Network to use for SNMP interface.
                   Default: 127,0,0,1

 --httpport PORT   HTTP port start range. Incremented by 1 for each node.
                   Default: Calculated starting at 10000 in increments of 100.

 --pbport PORT     PB port start range. Incremented by 1 for each node. 
                   Default: Calculated starting at 12000 in increments of 100.

 --hoport PORT     Handoff port start range. Incremented by 1 for each node.
                   Default: Calculated starting at 14000 in increments of 100.

 --snmpport PORT   SNMP port start range. Incremented by 1 for each node.
                   Default: Calculated starting at 16000 in increments of 100.

EOF

    return 0
}

# Set libdir based on the value of bindir.
# The only value this should consult is bindir.
# The only value it should set is libdir.
set_libdir () {
    if [ -z "$bindir" ]; then
        libdir=
    fi

    # the most typical scenario is prefix/lib/riak/{lib,releases,erts-x.x.x}
    libdir="${bindir%/bin}"
    libdir="${libdir%/sbin}/lib/riak"

    if [ ! -d "$libdir" ]; then
        # if that's not around, try lib64
        libdir="${bindir%/bin}"
        libdir="${libdir%/sbin}/lib64/riak"
        if [ ! -d "$libdir" ]; then
            # if that's not it, then probably on OSX and path is something like:
            # /path/to/riak_ee-x.x.x/{bin,lib,releases,erts-x.x.x}
            libdir="${bindir%/bin}"
            libdir="${libdir%/sbin/riak}"
        fi
    fi
}

create_defaults () {
    template="default"
    ring_size="64"
    nodes="3"
    backend="bitcask"
    nodenet="127.0.0.1"
    httpnet="127.0.0.1"
    pbnet="127.0.0.1"
    snmpnet="127,0,0,1"

    # These could be up blank. If so, and they don't get overridden with
    # options, then errors will be thrown.
    # cluster_path (default: first path in colon separated RIAK_CLUSTERS)
    cluster_path=${RIAK_CLUSTERS/:*}

    # bindir (default: riak in path)
    riak_path=$(which riak 2> /dev/null)
    bindir="${riak_path%/riak}"
    set_libdir

    # start http port (default: start at 10000, next available increment of 100)
    httpport=10000

    # start PB port (default: start at 12000, next available increment of 100)
    pbport=12000

    # start handoff port (default: start at 14000, next available increment of 100)
    hoport=14000

    # start snmp port (start at 16000, next available increment of 100)
    snmpport=16000

    # make a list of node config files to inspect for port values.
    # Setting these initially to /dev/null prevents grep from trying to
    # read stdin when there are no config files
    configs=/dev/null
    snmpconfigs=/dev/null

    for pth in ${RIAK_CLUSTERS//:/ }; do
        configs="$configs $( ls ${pth}/*/node*/etc/app.config 2>/dev/null )"
    done

    for pth in ${RIAK_CLUSTERS//:/ }; do
        snmpconfigs="$snmpconfigs $( ls ${pth}/*/node*/etc/snmp/agent/conf/agent.conf 2>/dev/null )"
    done

    # Go through the conifg files and obtain the values being used.
    # The sequence goes:
    # 1. grep the configs for a term that will give the line with the value.
    #    ex:             {pb_port, 12001 }
    #
    # 2. grep some more to remove things we know we're not interested in.
    #    ex: remove things like '       %% Specify pb_port blah blah'
    #
    # 3. extract the value from the line with a regular expression.
    #    ex: 12001
    #        12002
    #        12003
    #        12101
    #        12102
    #        12103
    #          ...
    #
    # 4. Remove the last two digits of each result and replace them with zeros.
    #    (This maps all ports to the start of each 100-port port range.)
    #    ex: 12000
    #        12000
    #        12000
    #        12100
    #        12100
    #        12100
    #          ...
    #
    # 5. Run uniq to collapse the results, since node1, 2, etc from the same
    #    cluster will all be in the same port range.
    #    ex: 12000
    #        12100
    #          ...

    httpports=( $( grep -h http $configs 2>/dev/null \
      | grep -v %% 2>/dev/null \
      | grep -v https 2>/dev/null \
      | grep -v http_ 2>/dev/null \
      | sed 's/.*{ *http *, \[.*, *\([0-9][0-9]*\) *} *\] *},* */\1/' 2>/dev/null \
      | while read port; do echo ${port:0:$(( ${#port}-2 )) }00; done \
      | uniq ) )

    pbports=( $( grep -h pb_port $configs 2>/dev/null \
      | grep -v %% 2>/dev/null \
      | sed 's/.*{ *pb_port *, *\([0-9][0-9]*\) *},* */\1/' 2>/dev/null \
      | while read port; do echo ${port:0:$(( ${#port}-2 )) }00; done \
      | uniq ) )

    hoports=( $( grep -h handoff_port $configs 2>/dev/null \
      | grep -v %% 2>/dev/null \
      | sed 's/.*{ *handoff_port *, *\([0-9][0-9]*\) *},* */\1/' 2>/dev/null \
      | while read port; do echo ${port:0:$(( ${#port}-2 )) }00; done \
      | uniq ) )

    snmpports=( $( grep -h intAgentUDPPort $snmpconfigs 2>/dev/null \
      | sed 's/.*{ *intAgentUDPPort *, *\([0-9][0-9]*\) *}\./\1/' 2>/dev/null \
      | while read port; do echo ${port:0:$(( ${#port}-2 )) }00; done \
      | uniq ) )

    # Create the lists of possible ports. The ports numbers are used as both the
    # array index and value, to make them easy to find for the next step.
    for ((i=0; i<20; i++)); do
        httpportlist[$(( 10000+$i*100 ))]=$(( 10000+$i*100 )) # 10000 10100 10200
        pbportlist[$(( 12000+$i*100 ))]=$(( 12000+$i*100 ))   # 12000 12100 12200
        hoportlist[$(( 14000+$i*100 ))]=$(( 14000+$i*100 ))   # 14000 14100 14200
        snmpportlist[$(( 16000+$i*100 ))]=$(( 16000+$i*100 )) # 16000 16100 16200
    done

    # Go through the used ports and remove those from port lists
    for port in ${httpports[@]}; do
        unset httpportlist[$port]
    done

    for port in ${pbports[@]}; do
        unset pbportlist[$port]
    done

    for port in ${hoports[@]}; do
        unset hoportlist[$port]
    done

    for port in ${snmpports[@]}; do
        unset snmpportlist[$port]
    done

    # Take the first port from each port list as the start port to use
    httpport=${httpportlist[@]:1:1}
    pbport=${pbportlist[@]:1:1}
    hoport=${hoportlist[@]:1:1}
    snmpport=${snmpportlist[@]:1:1}

    return 0
}

manage_create () {
    create_defaults

    optspec=":-:"
    while getopts "$optspec" optchar; do
        case "${optchar}" in
            # long style options
            -)
                case "${OPTARG}" in
                    template)
                        template="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    path)
                        cluster_path="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    bindir)
                        bindir="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    libdir)
                        libdir="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    ring)
                        ring_size="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    nodes)
                        nodes="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    backend)
                        backend="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    httpnet)
                        net="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    pbnet)
                        net="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    snmpnet)
                        net="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    nodenet)
                        net="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    httpport)
                        httpport="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    pbport)
                        pbport="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    hoport)
                        hoport="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    snmpport)
                        snmpport="${!OPTIND}"
                        OPTIND=$(( $OPTIND + 1 ))
                        ;;
                    *)
                        if [ 1 = "$OPTERR" ] && [ ":" != "${optspec:0:1}" ]; then
                            echo "Unknown option --${OPTARG}" >&2
                        fi
                        ;;
                esac;;
        # single character options
        *)
            if [ 1 != "$OPTERR" ] || [ ":" = "${optspec:0:1}" ]; then
                echo "Non-option argument: '-${OPTARG}'" >&2
            fi
            ;;
        esac
    done

    # check paths for sanity
    if [ -z "$bindir" ]; then
        error_msg "Path to riak commands not specified and not found in PATH."
        error_msg "Please check \$PATH for the riak commands, or use --bindir"
        return 1
    fi

    if [ -z "$libdir" ]; then
        # Try one last time to set libdir, since bindir is non-zero length and
        # could have been set with --bindir
        set_libdir

        # Still empty? Error out
        if [ -z "$libdir" ]; then
            error_msg "Path to riak libs not specified and not able to be determined."
            error_msg "Set \$PATH to include a packaged riak command, or use the option --libdir"
            return 1
        fi
    fi

    if [ ! -x "$bindir"/riak ] || 
       [ ! -x "$bindir"/riak-admin ] ||
       [ ! -x "$bindir"/search-cmd ]; then
        error_msg "Error creating cluster. Check that riak, riak-admin, and search-cmd are"
        error_msg "executable and in the path:"
        error_msg "$bindir"
        error_msg "Or, use a different path for ${ul}bindir${noul}."
        return 1
    fi

    ertsdir=("${libdir}"/erts-*)
    if [ ! -d "${libdir}"/lib ] &&
       [ ! -d "${libdir}"/releases ] &&
       [ ! -d "$ertsdir" ]; then
        error_msg "Error creating cluster. Check that lib, releases, and erts-* are in the path:"
        error_msg "$libdir"
        error_msg "Or, use a different path for ${ul}libdir${noul}."
        return 1
    fi

    if [ ! -d "${template_dir}/${template}" ]; then
        error_msg "Template directory for configuration not found:"
        error_msg "${template_dir}/${template}"
        return 1
    fi

    # check port values for sanity
    # TODO

    # look for existing cluster, warn/override
    if [ ! -z $cluster_dir ]; then
        error_msg "Error: Cluster ${cluster_name} exists in path:"
        error_msg "${cluster_dir}"
        return 1
    fi

    # Let's get started
    mkdir -p "${cluster_path}/${cluster_name}/cmds"
    if [ $? -ne 0 ]; then
        error_msg "Error creating cluster. Could not 'mkdir -p' the paths:"
        error_msg "${cluster_path}/${cluster_name}/cmds"
        return 1
    fi

    # Edit the riak commands so they will run out of the node directories.
    # Grab the commands out of the package's bin directory
    cp "${bindir}/riak" "${cluster_path}/${cluster_name}/cmds/" || \
        { error_msg "Failed to copy riak command to ${cluster_path}/${cluster_name}/cmds/"; return 1; }
    cp "${bindir}/riak-admin" "${cluster_path}/${cluster_name}/cmds/" || \
        { error_msg "Failed to copy riak-admin command to ${cluster_path}/${cluster_name}/cmds/"; return 1; }
    cp "${bindir}/search-cmd" "${cluster_path}/${cluster_name}/cmds/" || \
        { error_msg "Failed to copy search-cmd command to ${cluster_path}/${cluster_name}/cmds/"; return 1; }
    riak_cmds=( riak riak-admin search-cmd )

    # If there's a riak-repl, get that also
    if [ -x "${bindir}/riak-repl" ]; then
        cp "${bindir}/riak-repl" "${cluster_path}/${cluster_name}/cmds/" || \
            { error_msg "Failed to copy riak-repl command to ${cluster_path}/${cluster_name}/cmds/"; return 1; }
        riak_cmds=( riak riak-admin search-cmd riak-repl )
    fi

    # Loop through the commands, editing their setup values to suit
    for riak_cmd in ${riak_cmds[@]}; do
        # Note that the sed here uses a single quote so the replacements
        # are literal and not executed by this script.
        # Also note that & must be escaped on the RHS of a sed.
        sed -i.bak \
            -e 's#^RUNNER_SCRIPT_DIR=.*#RUNNER_SCRIPT_DIR=$(cd ${0%/*} \&\& pwd)#' \
            -e 's#^RUNNER_BASE_DIR=.*#RUNNER_BASE_DIR=${RUNNER_SCRIPT_DIR%/*}#' \
            -e 's#^RUNNER_ETC_DIR=.*#RUNNER_ETC_DIR=$RUNNER_BASE_DIR/etc#' \
            -e 's#^RUNNER_LIB_DIR=.*#RUNNER_LIB_DIR=./lib#' \
            -e 's#^RUNNER_LOG_DIR=.*#RUNNER_LOG_DIR=$RUNNER_BASE_DIR/log#' \
            -e 's#^PIPE_DIR=.*#PIPE_DIR=/tmp/$RUNNER_BASE_DIR/#' \
            -e 's#^RUNNER_USER=.*#RUNNER_USER=#' \
            -e 's#^PLATFORM_DATA_DIR=.*#PLATFORM_DATA_DIR=./data#' \
            "${cluster_path}/${cluster_name}/cmds/${riak_cmd}"

        if [ 0 -ne $? ]; then
            error_msg "Problem creating modified Riak commands"
            return 1
        else
            rm -f "${cluster_path}/${cluster_name}/cmds/${riak_cmd}.bak"
        fi
    done

    # create node directories
    for ((i=1; i<=$nodes; i++)); do
        # Start with the node's directory skeleton
        nodedir="${cluster_path}/${cluster_name}/node${i}"
        mkdir -p "${nodedir}"/{bin,log,data/snmp/agent/db}
        if [ 0 -ne $? ]; then
            error_msg "Error creating cluster. Could not 'mkdir -p' the paths:"
            error_msg "${nodedir}"/{bin,log,data/snmp/agent/db}
            return 1
        fi

        # Get the node's modified commands
        cp "${cluster_path}"/"${cluster_name}"/cmds/* "${nodedir}/bin/" || \
            { error_msg "Failed to copy commands to ${nodedir}/bin/"; return 1; }

        ln -sf "${libdir}/lib" "${nodedir}/lib" || \
            { error_msg "Error creating ${nodedir}/lib"; return 1; }
        ln -sf "${libdir}/releases" "${nodedir}/releases" || \
            { error_msg "Error creating ${nodedir}/releases"; return 1; }
        ln -sf "${ertsdir}" "${nodedir}"/${erts_dir///erts-*} || \
            { error_msg "Error creating ${nodedir}"/${erts_dir///erts-*}; return 1; }

        # generate config for each node
        cp -R "${template_dir}/${template}" "${nodedir}/etc" || \
            { error_msg "Failed to copy template to ${nodedir}/etc"; return 1; }

        # check to ensure that the template contained the essentials
        if [ ! -f "${nodedir}/etc/app.config" ]; then
            error_msg "Node configuration file not found:"
            error_msg "${nodedir}/etc/app.config"
        fi

        if [ ! -f "${nodedir}/etc/vm.args" ]; then
            error_msg "Node configuration file not found:"
            error_msg "${nodedir}/etc/vm.args"
        fi

        # replace the template stand-ins with the given config options
        sed -i.template -e "s#RIAK_MANAGE_NODENET#$nodenet#" \
                        -e "s#RIAK_MANAGE_NODENAME#${cluster_name}-node${i}#" \
                        "${nodedir}/etc/vm.args"

        if [ 0 -ne $? ]; then
            error_msg "Error applying configuration to file:"
            error_msg "${nodedir}/etc/vm.args"
            return 1
        fi

        sed -i.template -e "s#RIAK_MANAGE_BACKEND#$backend#" \
                        -e "s#RIAK_MANAGE_HTTPNET#$httpnet#" \
                        -e "s#RIAK_MANAGE_PBNET#$pbnet#" \
                        -e "s#RIAK_MANAGE_SNMPNET#$snmpnet#" \
                        -e "s#RIAK_MANAGE_HTTPPORT#$(( $httpport + $i ))#" \
                        -e "s#RIAK_MANAGE_PBPORT#$(( $pbport + $i ))#" \
                        -e "s#RIAK_MANAGE_HOPORT#$(( $hoport + $i ))#" \
                        -e "s#RIAK_MANAGE_BINDIR#${bindir}#" \
                        -e "s#RIAK_MANAGE_LIBDIR#${libdir}#" \
                        -e "s#RIAK_MANAGE_DATADIR#${nodedir}/data#" \
                        -e "s#RIAK_MANAGE_ETCDIR#${nodedir}/etc#" \
                        -e "s#RIAK_MANAGE_LOGDIR#${nodedir}/log#" \
                        -e "s#RIAK_MANAGE_RING_SIZE#${ring_size}#" \
                        "${nodedir}/etc/app.config"

        if [ 0 -ne $? ]; then
            error_msg "Error applying configuration to file:"
            error_msg "${nodedir}/etc/app.config"
            return 1
        fi

        if [ -f "${nodedir}/etc/snmp/agent/conf/agent.conf" ]; then
            sed -i.template -e "s#RIAK_MANAGE_SNMPNET#$snmpnet#" \
                            -e "s#RIAK_MANAGE_SNMPPORT#$(( $snmpport + $i ))#" \
                            "${nodedir}/etc/snmp/agent/conf/agent.conf"
        fi

        if [ 0 -ne $? ]; then
            error_msg "Error applying configuration to file:"
            error_msg "${nodedir}/etc/snmp/agent/conf/agent.conf"
            return 1
        fi

    done

    # remove the cmds directory
    if [ ! -z ${cluster_path} ] &&
       [ ! -z ${cluster_name} ] &&
       [ -d "${cluster_path}"/"${cluster_name}"/cmds/ ]; then
        rm -rf "${cluster_path}"/"${cluster_name}"/cmds/
    fi

    return 0
}

